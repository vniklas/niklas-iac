name: Deploy to Test Environment

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
    paths:
      - '**.bicep'
      - '**.json'
      - 'parameters/main.parameters.test.json'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AZURE_RESOURCE_GROUP: rg-landingzone-test-001
  AZURE_LOCATION: swedencentral
  ENVIRONMENT: test

jobs:
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    environment: test
    if: github.event.pull_request.base.ref == 'main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group
        run: |
          echo "üèóÔ∏è Creating resource group for test environment..."
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags Environment=test Project=AzureLandingZone ManagedBy=GitHub-Actions

      - name: Deploy Infrastructure
        id: deploy
        run: |
          echo "üöÄ Deploying infrastructure to test environment..."
          
          DEPLOYMENT_NAME="deploy-test-$(date +%Y%m%d-%H%M%S)"
          
          az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file main.bicep \
            --parameters @parameters/main.parameters.test.json \
            --name $DEPLOYMENT_NAME \
            --verbose
          
          echo "deployment-name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Test environment deployment completed"

      - name: Verify Deployment
        run: |
          echo "‚úÖ Verifying test deployment..."
          
          # List all resources
          echo "üìä Deployed resources:"
          az resource list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --output table \
            --query '[].{Name:name, Type:type, Location:location, Status:properties.provisioningState}'

      - name: Run Integration Tests
        run: |
          echo "üß™ Running integration tests..."
          
          # Test network connectivity
          VNET_NAME=$(az network vnet list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          if [ ! -z "$VNET_NAME" ]; then
            echo "‚úÖ VNet connectivity test passed"
          else
            echo "‚ùå VNet test failed"
            exit 1
          fi
          
          # Test Key Vault access
          KV_NAME=$(az keyvault list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          if [ ! -z "$KV_NAME" ]; then
            # Try to list secrets (should work with proper permissions)
            az keyvault secret list --vault-name $KV_NAME --query 'length(@)' -o tsv > /dev/null
            echo "‚úÖ Key Vault access test passed"
          else
            echo "‚ùå Key Vault test failed"
            exit 1
          fi
          
          # Test Event Hub if exists
          EH_NAMESPACE=$(az eventhubs namespace list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          if [ ! -z "$EH_NAMESPACE" ]; then
            az eventhubs eventhub list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --namespace-name $EH_NAMESPACE --query 'length(@)' -o tsv > /dev/null
            echo "‚úÖ Event Hub test passed"
          fi
          
          echo "üéâ All integration tests passed!"

      - name: Update PR with Test Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const body = `## üß™ Test Environment Deployment Results
            
            ‚úÖ **Deployment Successful!**
            
            ### Deployed Resources:
            - Resource Group: \`${{ env.AZURE_RESOURCE_GROUP }}\`
            - Environment: \`${{ env.ENVIRONMENT }}\`
            - Deployment: \`${{ steps.deploy.outputs.deployment-name }}\`
            
            ### Validation Results:
            - ‚úÖ Infrastructure deployment completed
            - ‚úÖ Resource verification passed
            - ‚úÖ Integration tests passed
            
            ### Next Steps:
            1. Review the deployed resources in Azure Portal
            2. Perform manual testing if needed
            3. Approve PR for production deployment
            
            ---
            *This test deployment will be cleaned up automatically after 24 hours*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  schedule-cleanup:
    name: Schedule Test Environment Cleanup
    runs-on: ubuntu-latest
    needs: deploy-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Schedule Cleanup
        run: |
          echo "‚è∞ Test environment will be automatically cleaned up in 24 hours"
          echo "To clean up manually, run the Azure Resource Cleanup workflow"
