name: Deploy Azure Landing Zone

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: az-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_RESOURCE_GROUP: rg-landingzone-dev-001
  AZURE_LOCATION: swedencentral

jobs:
  validate:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          if ! command -v az >/dev/null 2>&1; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Bicep CLI
        run: |
          az bicep install
          az bicep version

      - name: Validate Bicep templates
        run: |
          az bicep build --file main.bicep
          echo "‚úÖ Bicep templates validated successfully"

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment: dev
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          if ! command -v az >/dev/null 2>&1; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags Environment=dev Project=AzureLandingZone

      - name: Deploy Infrastructure
        run: |
          # Start deployment
          DEPLOYMENT_NAME="deploy-landing-zone-$(date +%Y%m%d-%H%M%S)"
          
          az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file main.bicep \
            --parameters @parameters/main.parameters.dev.json \
            --name $DEPLOYMENT_NAME \
            --verbose
          
          # Wait for deployment to complete
          az deployment group wait \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name $DEPLOYMENT_NAME \
            --created \
            --timeout 1800
          
          echo "‚úÖ Infrastructure deployment completed successfully"

      - name: Verify Deployment
        run: |
          echo "üìä Deployment Summary:"
          az resource list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --output table \
            --query '[].{Name:name, Type:type, Location:location}'

  post-deployment:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: dev
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          if ! command -v az >/dev/null 2>&1; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Key Resources
        run: |
          echo "üîç Verifying key resources..."
          
          # Check VNet
          VNET_NAME=$(az network vnet list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          if [ ! -z "$VNET_NAME" ]; then
            echo "‚úÖ Virtual Network: $VNET_NAME"
          else
            echo "‚ùå Virtual Network not found"
            exit 1
          fi
          
          # Check Storage Account
          STORAGE_NAME=$(az storage account list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          if [ ! -z "$STORAGE_NAME" ]; then
            echo "‚úÖ Storage Account: $STORAGE_NAME"
          else
            echo "‚ùå Storage Account not found"
            exit 1
          fi
          
          # Check Log Analytics Workspace
          LAW_NAME=$(az monitor log-analytics workspace list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          if [ ! -z "$LAW_NAME" ]; then
            echo "‚úÖ Log Analytics Workspace: $LAW_NAME"
          else
            echo "‚ùå Log Analytics Workspace not found"
            exit 1
          fi
          
          # Check Key Vault
          KV_NAME=$(az keyvault list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          if [ ! -z "$KV_NAME" ]; then
            echo "‚úÖ Key Vault: $KV_NAME"
          else
            echo "‚ùå Key Vault not found"
            exit 1
          fi
          
          echo "üéâ All key resources verified successfully!"

      - name: Test Connectivity
        run: |
          echo "üîó Testing resource connectivity..."
          
          # Test Log Analytics Workspace
          LAW_NAME=$(az monitor log-analytics workspace list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)
          LAW_ID=$(az monitor log-analytics workspace show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --workspace-name $LAW_NAME --query id -o tsv)
          
          if [ ! -z "$LAW_ID" ]; then
            echo "‚úÖ Log Analytics Workspace connectivity verified"
          else
            echo "‚ùå Log Analytics Workspace connectivity failed"
            exit 1
          fi
          
          echo "üéØ Connectivity tests completed successfully!"
